using System.Security.Cryptography;
using System.Text;

internal class Program1
{
    static void Main(string[] args)
    {
        string secretKey = "secret_key";

        Order order = new Order(1, 12000);
        HashAlgorithmBase md5HashAlgorithm = new MD5HashAlgorithm();
        HashAlgorithmBase sha256HashAlgorithm = new SHA256HashAlgorithm();

        PaymentSystemMain system1 = new PaymentSystem1(md5HashAlgorithm);
        PaymentSystemMain system2 = new PaymentSystem2(md5HashAlgorithm);
        PaymentSystemMain system3 = new PaymentSystem3(sha256HashAlgorithm, secretKey);

        Console.WriteLine(system1.GetPayingLink(order));
        Console.WriteLine(system2.GetPayingLink(order));
        Console.WriteLine(system3.GetPayingLink(order));
    }
}

public abstract class HashAlgorithmBase
{
    public string Create(string input)
    {
        if (input == null)
            throw new ArgumentNullException(nameof(input));

        using (var hashAlgorithm = CreateAlgorithm())
        {
            byte[] inputBytes = Encoding.UTF8.GetBytes(input);
            byte[] hashBytes = hashAlgorithm.ComputeHash(inputBytes);
            return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant();
        }
    }

    protected abstract HashAlgorithm CreateAlgorithm();
}

public class MD5HashAlgorithm : HashAlgorithmBase
{
    protected override HashAlgorithm CreateAlgorithm()
    {
        return MD5.Create();
    }
}

public class SHA256HashAlgorithm : HashAlgorithmBase
{
    protected override HashAlgorithm CreateAlgorithm()
    {
        return SHA256.Create();
    }
}

public class Order
{
    private const int MinValue = 1;

    public readonly int Id;
    public readonly int Amount;

    public Order(int id, int amount)
    {
        if (id <= MinValue)
            throw new ArgumentOutOfRangeException(nameof(id), "Id должен быть положительным");

        if (amount <= MinValue)
            throw new ArgumentOutOfRangeException(nameof(amount), "Amount должен быть положительным");

        Id = id;
        Amount = amount;
    }
}

public abstract class PaymentSystemMain
{
    protected readonly HashAlgorithmBase _hashAlgorithm;

    public PaymentSystemMain(HashAlgorithmBase hashAlgorithm)
    {
        _hashAlgorithm = hashAlgorithm ?? throw new ArgumentNullException(nameof(hashAlgorithm));
    }

    public string GetPayingLink(Order order)
    {
        if (order == null)
            throw new ArgumentNullException(nameof(order));

        string hash = GenerateHash(order);

        return CreatePaymentLink(order, hash);
    }

    protected abstract string GenerateHash(Order order);

    protected abstract string CreatePaymentLink(Order order, string hash);
}

public class PaymentSystem1 : PaymentSystemMain
{
    public PaymentSystem1(HashAlgorithmBase hashAlgorithm) : base(hashAlgorithm) { }

    protected override string GenerateHash(Order order)
    {
        return _hashAlgorithm.Create(order.Id.ToString());
    }

    protected override string CreatePaymentLink(Order order, string hash)
    {
        return $"pay.system1.ru/order?amount={order.Amount}RUB&hash={hash}";
    }
}

public class PaymentSystem2 : PaymentSystemMain
{
    public PaymentSystem2(HashAlgorithmBase hashAlgorithm) : base(hashAlgorithm) { }

    protected override string GenerateHash(Order order)
    {
        return _hashAlgorithm.Create(order.Id.ToString() + order.Amount.ToString());
    }

    protected override string CreatePaymentLink(Order order, string hash)
    {
        return $"order.system2.ru/pay?hash={hash}";
    }
}

public class PaymentSystem3 : PaymentSystemMain
{
    private readonly string _secretKey;

    public PaymentSystem3(HashAlgorithmBase hashAlgorithm, string secretKey) : base(hashAlgorithm)
    {
        if (string.IsNullOrWhiteSpace(secretKey))
            throw new ArgumentNullException(nameof(secretKey));

        _secretKey = secretKey;
    }

    protected override string GenerateHash(Order order)
    {
        return _hashAlgorithm.Create($"{order.Id}{order.Amount}{_secretKey}");
    }

    protected override string CreatePaymentLink(Order order, string hash)
    {
        return $"system3.com/pay?amount={order.Amount}&currency=RUB&hash={hash}";
    }
}
